@startuml

hide circle
skinparam classAttributeIconSize 0
skinparam monochrome true

abstract Pregunta {
    - enunciado : String
    - categoria : String
    - descripcionRespuesta : String
    - opciones : List<Opcion>
    - opcionesCorrectas : List<Opcion>
    - evaluador : EvaluadorDePuntaje
    - modificadoresCompatibles : List<Modificador>
    # Pregunta(enunciado: String, opciones: List<Opcion>, \n cantidadOpcionesMin: int, cantidadOpcionesMax: int, \n opcionesCorrectas: List<Opcion>, evaluador: EvaluadorDePuntajes, \n categoria: String, descripcionRespuesta: String, modificadoresCompatibles: List<Modificador>)
    # calcularPuntaje(respuestasCorrectas: int, respuestasIncorrectas: int): int
    + evaluarRespuestas(respuestas: List<Opcion>): int
    + {abstract} getTipoDePregunta(): String
}

class ClassicTF {
    + ClassicTF(enunciado: String, opciones: List<Opcion>, \n opcionCorrecta: Opcion, categoria: String, descripcionRespuesta: String)
    + getTipoDePregunta(): String
}

class PenaltyTF {
    + PenaltyTF(enunciado: String, opciones: List<Opcion>, \n opcionCorrecta: Opcion, categoria: String, descripcionRespuesta: String)
    + getTipoDePregunta(): String
}

class ClassicMC {
    + ClassicMC(enunciado: String, opciones: List<Opcion>, \n opcionesCorrectas: List<Opcion>, categoria: String, descripcionRespuesta: String)
    + evaluarRespuestas(respuestas: List<Opcion>): int
    + getTipoDePregunta(): String
}

class PenaltyMC {
    + PenaltyMC(enunciado: String, opciones: List<Opcion>, \n opcionesCorrectas: List<Opcion>, categoria: String, descripcionRespuesta: String)
    + getTipoDePregunta(): String
}

class ParcialMC {
    + ParcialMC(enunciado: String, opciones: List<Opcion>, \n opcionesCorrectas: List<Opcion>, categoria: String, descripcionRespuesta: String)
    + getTipoDePregunta(): String
}

class GroupChoice {
    + GroupChoice(enunciado: String, opciones: List<Opcion>, \n opcionesCorrectasGrupoA: List<Opcion>, categoria: String, descripcionRespuesta: String, descripcionGrupoA: String, descripcionGrupoB: String)
    + evaluarRespuestas(respuestas: List<Opcion>): int
    + getDescripcionGrupoA(): String
    + getDescripcionGrupoB(): String
    + getTipoDePregunta(): String
}

class OderedChoice {
    + OderedChoice(enunciado: String, opciones: List<Opcion>, \n opcionesOrdenadas: List<Opcion>, categoria: String, descripcionRespuesta: String)
    + evaluarRespuestas(respuestas : List<Opcion>): int
    + getTipoDePregunta(): String
}

ClassicTF -up-|> Pregunta
ClassicMC --up-|> Pregunta
PenaltyTF --up-|> Pregunta
PenaltyMC -up-|> Pregunta
ParcialMC --|> Pregunta
GroupChoice ---|> Pregunta
OderedChoice --|> Pregunta

@enduml
