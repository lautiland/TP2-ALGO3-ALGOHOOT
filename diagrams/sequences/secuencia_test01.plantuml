@startuml

!theme plain
skinparam style strictuml

Actor TestCase

create "ocpion1:Opcion"
TestCase -> "ocpion1:Opcion" : Opcion("Verdadero", true)

create "opcion2:Opcion"
TestCase -> "opcion2:Opcion" : Opcion("Falso", false)

create "__:ClassicTF__"
TestCase -> "__:ClassicTF__" : ClassicTF("Â¿Verdadero o falso?", List<Opcion>)

create "__:Juego__"
TestCase -> "__:Juego__" : Juego(jugadores : List<Jugador>, preguntas : List<Pregunta>)

TestCase -> "__:Juego__" : hacerPreguntas()

"__:Juego__" -> "jugador1Spy:Jugador" : obtenerRespuestas(...)
"__:Juego__" <-- "jugador1Spy:Jugador" : [opcion1]
"__:Juego__" -> "__:ClassicTF__" : evaluarRespuestas([opcion1])
"__:Juego__" <-- "__:ClassicTF__" : 1
"__:Juego__" -> "jugador1Spy:Jugador" : modificarPuntos(1)

"__:Juego__" -> "jugador2Spy:Jugador" : obtenerRespuestas(...)
"__:Juego__" <-- "jugador2Spy:Jugador" : [opcion2]
"__:Juego__" -> "__:ClassicTF__" : evaluarRespuestas([opcion2])
"__:Juego__" <-- "__:ClassicTF__" : 0
"__:Juego__" -> "jugador2Spy:Jugador" : modificarPuntos(1)

TestCase -> "jugador1Spy:Jugador": getPuntos()
TestCase <-- "jugador1Spy:Jugador": 1

TestCase -> "jugador2Spy:Jugador": getPuntos()
TestCase <-- "jugador2Spy:Jugador": 0

TestCase -> TestCase : AssertEquals(1, 1)
TestCase -> TestCase : AssertEquals(0, 0)

@enduml
